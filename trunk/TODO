- More granularity of builds. Allow rebuilding of individual releases, 
  individual packagesets for a release, and even individual packages.
- Make it possible to install a functional ports tree into releases. 
- Create options to define what to include in a release: minimal system, X,
  ports, sources, kernel source only, etc.
- Give option of dumping built packages in a directory that is shared via
  http/ftp so it can be used for binary package updates on running systems with 
  portupgrade -P.
- Binary patches for base system update. Keep previous versions of a built
  release around, and each time a new build of that release is done, create a
  patch (or set of patches) against the previous version using bsdiff (see
  http://sf.net/projects/cx-bsdiff for python bsdiff module. This needs a port).
  Then, keep these patch(sets), with cryptographic signatures, and make them
  available in some http/ftp accessible dir for older farbot-built machines to
  grab when an update is needed. Bonus points if the client can use
  freebsd-update. Ignore changes in config files! Not sure how to handle the
  kernel; maybe just require local upgrade/recompilation of kernel on clients
  for now.
- Alternative to previous: support optionally creating releases from binaries on
  official FreeBSD release CDs. This will make it possible to use freebsd-update
  on machines imaged from these releases. It will also skip a lot of compiling,
  leading to faster farbot builds.
- Add paging to bootloader menu so we can have more than 8 or so installation
  types.
- Allow customization of install from bootloader menu: give user option to
  select release, packagesets, disk layout, etc. as an alternative to
  pre-configured installations in farbot configuration file.
- Support for portsnap as an alternative to cvs for installing ports tree in
  build chroot. This coupled with building from official release binaries could
  bring the possibility of running farbot without having a mirror of FreeBSD's
  cvs repository on hand.
- Add an option for per port distfiles which can be copied from some location.
  This way the distfiles cache given by the Distfiles option in PackageSets can
  be periodically cleaned out without fear of accidentally deleting some
  distfile that can't be automatically downloaded (e.g. diablo-jdk).
