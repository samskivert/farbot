#!/usr/bin/env python
# farbctl vi:ts=4:sw=4:expandtab:
#
# Copyright (c) 2006 Three Rings Design, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright owner nor the names of contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import getopt, sys, os
import ZConfig
import shutil

from twisted.internet import reactor, defer, threads
from twisted.python import threadable 
threadable.init()

import farb
from farb import utils, builder, config, sysinstall

INDEX_PREFIX='INDEX'

def usage():
    print "Usage: %s [-h] [-f config file] [-r action]" % sys.argv[0]
    print "    -h             Print usage (this message)"
    print "    -f <config>    Use configuration file"
    print "    -r <action>    Execute <action>"
    print "\nSupported actions:"
    print "    release        Build all defined releases"

def main():
    conf_file = None
    action = None

    try:
        opts,args = getopt.getopt(sys.argv[1:], "hf:r:")
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    for opt,arg in opts:
        if opt == "-h":
            usage()
            sys.exit()
        if opt == "-f":
            conf_file = arg
        if opt == "-r":
            action = arg

    if (conf_file == None or action == None):
        usage()
        sys.exit(1)

    # a dictionary mapping packages to releases
    release_packages = {}
    # Load our configuration schema
    schema = ZConfig.loadSchema(farb.CONFIG_SCHEMA)
    try:
        farbconfig, handler = ZConfig.loadConfig(schema, conf_file)
        config.verifyReferences(farbconfig)
        release_packages = config.verifyPackages(farbconfig)
    except ZConfig.ConfigurationError, e:
        print "Configuration Error: %s" % e
        sys.exit(1)

    # Set up logging
    try:
        farbconfig.Logging()
    except Exception, e:
        print "Log initialization failed: %s" % e
        sys.exit(1)

    # Execute requested action
    if (action == "release"):
        rbr = ReleaseBuildRunner(farbconfig, release_packages)
        rbr.run()
    else:
        print "Unknown action \"%s\".\n" % (action)
        usage()
        sys.exit(1)

    reactor.run()

class BuildContext(object):
    """
    Context associated with release and packaging builds.
    """
    def __init__(self, description, logPath):
        """
        @param description: Description of the build
        @param logPath: Path to log file, if any.
        """
        self.description = description
        self.logPath = logPath

class ReleaseBuildRunner(object):
    """
    Run a set of release builds, printing
    an error and stopping the reactor on failure.
    """
    def __init__(self, config, release_packages):
        self.logs = []
        self.oe = utils.OrderedExecutor()

        # Iterate through installations, instantiating release builds
        for inst in config.Installations.Installation:
            releaseName = inst.release.lower()
            for release in config.Releases.Release:
                if (releaseName.lower() == release.getSectionName()):
                    # Useful paths
                    buildroot = os.path.join(config.Releases.buildroot, release.getSectionName())
                    installroot = os.path.join(config.Releases.installroot, release.getSectionName())
                    chroot = os.path.join(buildroot, 'chroot')

                    ports_dir = os.path.join(chroot, 'usr', 'ports')
                    package_dir = os.path.join(ports_dir, 'packages')
                    install_package_dir = os.path.join(installroot, 'packages')

                    # Create the build directory
                    try:
                        if (not os.path.exists(buildroot)):
                            os.makedirs(buildroot)
                    except Exception, e:
                        print "Failed to create build root: %s" % (e)
                        sys.exit(1)

                    # Open the log file
                    logPath = os.path.join(buildroot, 'build.log')
                    buildLog = open(logPath, 'w', 0)
                    self.logs.append(buildLog)

                    rb = builder.ReleaseBuilder(release.cvsroot, release.cvstag, buildroot)

                    # Add our release builder to the OrderedExecutor
                    bctx = BuildContext("%s release build" % release.getSectionName(), logPath)
                    eu = utils.ExecutionUnit(bctx, rb.build, buildLog)
                    self.oe.appendExecutionUnit(eu)

                    # Build packages for the release
                    packageList = release_packages.get(release.getSectionName())
                    if (packageList):
                        # Checkout the ports tree into the chroot 
                        cvs = builder.CVSCommand(release.cvsroot)
                        cvs_bctx = BuildContext("%s release cvs export of \"%s\"" % (release.getSectionName(), ports_dir), logPath)
                        eu = utils.ExecutionUnit(cvs_bctx, cvs.export, 'HEAD', 'ports', ports_dir, buildLog)
                        self.oe.appendExecutionUnit(eu)

                        # Make the packages directory 
                        eu = utils.ExecutionUnit(bctx, defer.execute, os.mkdir, package_dir) 
                        self.oe.appendExecutionUnit(eu)

                        # Fire off a builder for each package
                        for package in packageList:
                            # Open a per-package log file
                            logPath = os.path.join(buildroot, package.package + '.log')
                            packageLog = open(logPath, 'w', 0)
                            self.logs.append(packageLog)

                            # Grab the package build options
                            buildoptions = {}
                            if package.BuildOptions:
                                buildoptions = package.BuildOptions.Options

                            # Add a package builder to the OrderedExecutor
                            pb = builder.PackageBuilder(chroot, package.port, buildoptions)
                            pctx = BuildContext("%s package build" % package.package, logPath)
                            eu = utils.ExecutionUnit(bctx, pb.build, packageLog)
                            self.oe.appendExecutionUnit(eu)

                        # Download the current port index
                        index = builder.MakeCommand(builder.FREEBSD_PORTS_PATH, ['fetchindex'], chrootdir=chroot)
                        eu = utils.ExecutionUnit(bctx, index.make, buildLog)
                        self.oe.appendExecutionUnit(eu)

                    # Clean the netinstall release directory
                    if (os.path.exists(installroot)):
                        eu = utils.ExecutionUnit(bctx, threads.deferToThread, shutil.rmtree, installroot) 
                        self.oe.appendExecutionUnit(eu)

                    # Copy the newly minted release into the netinstall root
                    eu = utils.ExecutionUnit(bctx, threads.deferToThread, shutil.copytree, os.path.join(chroot, 'R', 'ftp'), installroot, 1)
                    self.oe.appendExecutionUnit(eu)

                    # If we built any packages, do some final bit pushing
                    if (packageList):
                        # Copy the packages into the netinstall root
                        eu = utils.ExecutionUnit(bctx, threads.deferToThread, shutil.copytree, package_dir, install_package_dir, 1)
                        self.oe.appendExecutionUnit(eu)

                        # Copy the package INDEX files into the netinstall root
                        eu = utils.ExecutionUnit(bctx, self._copyPackageIndexes, ports_dir, install_package_dir)
                        self.oe.appendExecutionUnit(eu)

    def _copyPackageIndexes(self, source, dest):
        """
        Copy any INDEX* files from source to dest
        @param source: Source directory containing port INDEX* files
        @param dest: Destination directory
        """
        # Copy the package INDEX files into the netinstall root
        for file in os.listdir(source):
            # Find all INDEX* files.
            if (file[:len(INDEX_PREFIX)] == INDEX_PREFIX):
                # Copy them over
                shutil.copy2(os.path.join(source, file), dest)

        return defer.succeed(None)

    def _closeLogs(self):
        # Close all the log files
        for logFile in self.logs:
            logFile.close()

    def _cbReleaseBuild(self, result):
        print "Release Build Complete"
        self._closeLogs()

        reactor.stop()

    def _ebReleaseBuild(self, failure):
        try:
            # Grab the BuildContext and raise the original exception
            bctx = failure.value.executionContext
            failure.value.originalFailure.raiseException()
        except builder.ReleaseBuildError, e:
            print "%s failed: %s" % (bctx.description, e)
            print "For more information, refer to the release build log: %s" % (bctx.logPath)
        except builder.PackageBuildError, e:
            print "%s failed: %s" % (bctx.description, e)
            print "For more information, refer to the package build log: %s" % (bctx.logPath)
        except builder.CVSCommandError, e:
            print "%s failed, cvs returned: %s" % (bctx.description, e)
            print "For more information, refer to the build log: %s" % (bctx.logPath)
        except Exception, e:
            print "Unhandled Release Build Error: %s" % (e)

        self._closeLogs()
        reactor.stop()

    def run(self):
        # Run!
        d = self.oe.run()
        d.addCallback(self._cbReleaseBuild)
        d.addErrback(self._ebReleaseBuild)


if __name__ == "__main__":
    main()
