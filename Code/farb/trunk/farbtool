#!/usr/bin/env python
# farbctl vi:ts=4:sw=4:expandtab:
#
# Copyright (c) 2006 Three Rings Design, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright owner nor the names of contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import getopt, sys, os
import ZConfig

from twisted.internet import reactor

import farb
from farb import utils

def usage():
    print "Usage: %s [-h] [-f config file] [-r action]" % sys.argv[0]
    print "    -h             Print usage (this message)"
    print "    -f <config>    Use configuration file"
    print "    -r <action>    Execute <action>"
    print "\nSupported actions:"
    print "    release        Build all defined releases"

def main():
    conf_file = None
    action = None

    try:
        opts,args = getopt.getopt(sys.argv[1:], "hf:r:")
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    for opt,arg in opts:
        if opt == "-h":
            usage()
            sys.exit()
        if opt == "-f":
            conf_file = arg
        if opt == "-r":
            action = arg

    if (conf_file == None or action == None):
        usage()
        sys.exit(1)

    # Load our configuration schema
    schema = ZConfig.loadSchema(farb.CONFIG_SCHEMA)
    try:
        config, handler = ZConfig.loadConfig(schema, conf_file)
    except ZConfig.ConfigurationError, e:
        print "Configuration Error: %s" % e
        sys.exit(1)

    # Set up logging
    try:
        config.Logging()
    except Exception, e:
        print "Log initialization failed: %s" % e
        sys.exit(1)

    # Execute requested action
    if (action == "release"):
        release_build(config)
    else:
        print "Unknown action \"%s\".\n" % (action)
        usage()
        sys.exit(1)

    reactor.run()

def _cbReleaseBuild(result, logs):
    print "Release Build Complete"

    # Close all the log files
    for logFile in logs:
        logFile.close()

    reactor.stop()

def _ebReleaseBuild(failure, logs):
    print "Release Build Failed: %s" % (failure)

    # Close all the log files
    for logFile in logs:
        logFile.close()

    reactor.stop()

def release_build(config):
    logs = []
    oe = utils.OrderedExecutor()

    for rb in config.Releases.Release:
        # Create the build directory
        try:
            if (not os.path.exists(rb.buildroot)):
                os.makedirs(rb.buildroot)
        except Exception, e:
            print "Failed to create build root: %s" % (e)
            sys.exit(1)

        # Open the log file
        logPath = os.path.join(rb.buildroot, 'build.log')
        logFile = open(logPath, 'w')
        logs.append(logFile)

        # Add our builder to the list of callables
        oe.appendCallable(rb.build, logFile)

    # Run!
    d = oe.run()
    d.addCallback(_cbReleaseBuild, logs)
    d.addErrback(_ebReleaseBuild, logs)


if __name__ == "__main__":
    main()
